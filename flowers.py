import asyncio
import hashlib
from bs4 import BeautifulSoup
import aiohttp
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext

# ============================
# Database Setup
# ============================
DB_PATH = "tracked_links.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tracked_links (
            chat_id INTEGER,
            url TEXT,
            title TEXT,
            PRIMARY KEY (chat_id, url)
        )
    """)
    conn.commit()
    conn.close()

def add_link_to_db(chat_id, url, title):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO tracked_links (chat_id, url, title) VALUES (?, ?, ?)", (chat_id, url, title))
    conn.commit()
    conn.close()

def remove_link_from_db(chat_id, url):
    """–£–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tracked_links WHERE chat_id = ? AND url = ?", (chat_id, url))
    conn.commit()
    conn.close()

def get_links_from_db(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT url, title FROM tracked_links WHERE chat_id = ?", (chat_id,))
    links = cursor.fetchall()
    conn.close()
    return links

# ============================
# Global Variables
# ============================
USER_STOP_FLAG = {}  # {chat_id: {url: True}} - —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TOKEN = '7432735809:AAHqF5L4oCuLQ4M7eezywP-GvbPZcrySAuQ'  # –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
CHECK_INTERVAL = 3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# ============================
# Helper Functions
# ============================

def generate_unique_id(url):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è URL."""
    return hashlib.md5(url.encode('utf-8')).hexdigest()[:10]

async def check_product_status(url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                response.raise_for_status()
                soup = BeautifulSoup(await response.text(), 'html.parser')

                title_tag = soup.find('h1', class_='nom-name is-hidden-sm', itemprop='name')
                title = title_tag.text.strip() if title_tag else 'Title not found'

                # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ç–µ–≥–µ <meta itemprop="price">
                price_meta = soup.find('meta', itemprop='price')
                price = price_meta['content'] if price_meta else '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'

                status_tag = soup.find('td', itemprop='offers')
                if status_tag:
                    availability = status_tag.find('meta', itemprop='availability')
                    if availability and availability['content'] == 'InStock':
                        return title, price, True, 'InStock'
                    elif availability and availability['content'] == 'OutOfStock':
                        return title, price, False, 'OutOfStock'

                return title, price, False, None
    except Exception as e:
        return 'Error loading page', '–û—à–∏–±–∫–∞ —Ü–µ–Ω—ã', False, None


async def monitor_product(url, chat_id, bot, track_status):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å."""
    try:
        while True:
            if USER_STOP_FLAG.get(chat_id, {}).get(url):
                break

            title, price, status, status_check = await check_product_status(url)

            if status_check == track_status:
                message = f'üå∫ –ü—Ä–æ–¥—É–∫—Ç "{title}" –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Ü–µ–Ω–µ {price}.'
                keyboard = [
                    [InlineKeyboardButton(f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç: {title}", url=url)],
                    [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data=f"remove_{generate_unique_id(url)}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)

            await asyncio.sleep(CHECK_INTERVAL)

    except asyncio.CancelledError:
        print(f"–ó–∞–¥–∞—á–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è {url} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        pass

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add {URL}, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç.")

async def add_link(update: Update, context: CallbackContext):
    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω URL –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    url = context.args[0]
    chat_id = update.effective_chat.id

    title, price, status, _ = await check_product_status(url)
    add_link_to_db(chat_id, url, title)

    await update.message.reply_text(f"–ü—Ä–æ–¥—É–∫—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {title}. –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥.")
    asyncio.create_task(monitor_product(url, chat_id, context.bot, 'InStock'))

async def remove_link(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    if update.callback_query:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏
        unique_id = update.callback_query.data.split('_')[1]
        links = get_links_from_db(chat_id)
        url_to_remove = next((url for url, title in links if generate_unique_id(url) == unique_id), None)
        if url_to_remove:
            remove_link_from_db(chat_id, url_to_remove)
            await update.callback_query.edit_message_text(f"–°—Å—ã–ª–∫–∞ \"{url_to_remove}\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            USER_STOP_FLAG.setdefault(chat_id, {})[url_to_remove] = True
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    url = context.args[0]
    remove_link_from_db(chat_id, url)
    await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {url}.")
    USER_STOP_FLAG.setdefault(chat_id, {})[url] = True

async def list_links(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    links = get_links_from_db(chat_id)

    if not links:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫.")
        return

    message = "–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:\n" + "\n".join([f"- {title} ({url})" for url, title in links])
    await update.message.reply_text(message)

# ============================
# Main Function
# ============================

async def restore_tracking(application):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, url FROM tracked_links")
    links = cursor.fetchall()
    conn.close()

    for chat_id, url in links:
        asyncio.create_task(monitor_product(url, chat_id, application.bot, 'InStock'))

def main():
    init_db()

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_link))
    application.add_handler(CommandHandler("remove", remove_link))
    application.add_handler(CommandHandler("list", list_links))
    application.add_handler(CallbackQueryHandler(remove_link, pattern="^remove_"))

    application.job_queue.run_once(lambda context: asyncio.create_task(restore_tracking(application)), 0)

    application.run_polling()

if __name__ == "__main__":
    main()
